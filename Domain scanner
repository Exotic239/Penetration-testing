import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import sublist3r
import dns.resolver
import socket
import threading

def get_subdomains(domain):
    subdomains = sublist3r.main(domain, 40, savefile=None, ports=None, silent=True, verbose=False, enable_bruteforce=False, engines=None)
    return subdomains

def resolve_ip(domain):
    try:
        result = dns.resolver.resolve(domain, 'A')
        return [ip.address for ip in result]
    except Exception as e:
        print(f"Error resolving {domain}: {e}")
        return []

def check_open_ports(ip, ports):
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        try:
            sock.connect((ip, port))
            open_ports.append(port)
        except:
            pass
        sock.close()
    return open_ports

def scan_domain(domain, ports):
    subdomains = get_subdomains(domain)
    results = []
    
    for subdomain in subdomains:
        ips = resolve_ip(subdomain)
        for ip in ips:
            open_ports = check_open_ports(ip, ports)
            results.append((subdomain, ip, open_ports))
    
    return results

def start_scan():
    domain = domain_entry.get()
    if not domain:
        messagebox.showerror("Error", "Please enter a domain")
        return
    
    results_display.delete(1.0, tk.END)
    results_display.insert(tk.END, "Scanning...\n")
    
    def run_scan():
        ports = [21, 22, 23, 25, 53, 80, 110, 443, 445, 1433, 1521, 3306, 3389, 5432, 5900, 8080]  # Common ports
        results = scan_domain(domain, ports)
        display_results(results)
    
    threading.Thread(target=run_scan).start()

def display_results(results):
    results_display.delete(1.0, tk.END)
    for subdomain, ip, open_ports in results:
        results_display.insert(tk.END, f"Subdomain: {subdomain}\n")
        results_display.insert(tk.END, f"IP: {ip}\n")
        results_display.insert(tk.END, f"Open Ports: {', '.join(map(str, open_ports))}\n")
        results_display.insert(tk.END, '-' * 40 + '\n')

app = tk.Tk()
app.title("Mass Subdomain Scanner")

frame = ttk.Frame(app, padding="10")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

domain_label = ttk.Label(frame, text="Domain:")
domain_label.grid(row=0, column=0, sticky=tk.W)

domain_entry = ttk.Entry(frame, width=50)
domain_entry.grid(row=0, column=1, sticky=(tk.W, tk.E))
domain_entry.focus()

scan_button = ttk.Button(frame, text="Scan", command=start_scan)
scan_button.grid(row=0, column=2, sticky=tk.W)

results_display = scrolledtext.ScrolledText(frame, width=80, height=20, wrap=tk.WORD)
results_display.grid(row=1, column=0, columnspan=3, pady=10)

for child in frame.winfo_children():
    child.grid_configure(padx=5, pady=5)

app.columnconfigure(0, weight=1)
app.rowconfigure(0, weight=1)

app.mainloop()

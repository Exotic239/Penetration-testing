from flask import Flask, render_template, request
import sublist3r
import dns.resolver
import socket

app = Flask(__name__)

def get_subdomains(domain):
    subdomains = sublist3r.main(domain, 40, savefile=None, ports=None, silent=True, verbose=False, enable_bruteforce=False, engines=None)
    return subdomains

def resolve_ip(domain):
    try:
        result = dns.resolver.resolve(domain, 'A')
        return [ip.address for ip in result]
    except Exception as e:
        print(f"Error resolving {domain}: {e}")
        return []

def check_open_ports(ip, ports):
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        try:
            sock.connect((ip, port))
            open_ports.append(port)
        except:
            pass
        sock.close()
    return open_ports

def scan_domain(domain, ports):
    subdomains = get_subdomains(domain)
    results = []
    
    for subdomain in subdomains:
        ips = resolve_ip(subdomain)
        for ip in ips:
            open_ports = check_open_ports(ip, ports)
            results.append((subdomain, ip, open_ports))
    
    return results

@app.route('/', methods=['GET', 'POST'])
def index():
    results = []
    if request.method == 'POST':
        domain = request.form['domain']
        ports = [21, 22, 23, 25, 53, 80, 110, 443, 445, 1433, 1521, 3306, 3389, 5432, 5900, 8080]  # Common ports
        results = scan_domain(domain, ports)
    return render_template('index.html', results=results)

if __name__ == "__main__":
    app.run(debug=True)
